version: "3.8"

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local

networks:
  default:
    name: elastic
    external: false

services:
  setup:
    # Make sure STACK_VERSION is set to 9.0.0 in your environment/.env file
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0" # Run as root to manage certs and permissions
    command: >
      bash -c '
        # Check if passwords are set
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        # Create CA certificate if it doesnt exist
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        # Create Certificates if they dont exist
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        # Set permissions for certs directory
        chown -R root:root config/certs;
        find config/certs -type d -exec chmod 750 \{\} \;;
        find config/certs -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        # Wait for Elasticsearch to start and respond (may take time)
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        # Set the password for the kibana_system user
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All setup tasks done!";
      '
    healthcheck:
      # Check if the cert generation was successful
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    # Make sure STACK_VERSION is set to 9.0.0 in your environment/.env file
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs # Mount certs volume
      - esdata01:/usr/share/elasticsearch/data      # Mount data volume
    ports:
      - ${ES_PORT:-9200}:9200 # Expose Elasticsearch port
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME:-docker-cluster} # Use CLUSTER_NAME from .env or default
      # - discovery.type=single-node # Removed/Commented out for ES 9.x compatibility
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD} # Set elastic user password
      - bootstrap.memory_lock=true # Lock memory
      # Security settings
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate # Verify certs using CA
      - xpack.license.self_generated.type=${LICENSE:-basic} # Set license type (basic/trial)
    cpus: ${ES_CPU_LIMIT} # Optional CPU limit
    mem_limit: ${ES_MEM_LIMIT:-2g} # Memory limit (adjust as needed)
    ulimits:
      memlock:
        soft: -1 # Allow unlimited memory locking
        hard: -1
    healthcheck:
      # Check if Elasticsearch is up and requires authentication
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy # Wait for Elasticsearch to be healthy
    # Make sure STACK_VERSION is set to 9.0.0 in your environment/.env file
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs   # Mount certs volume
      - kibanadata:/usr/share/kibana/data      # Mount data volume
    ports:
      - ${KIBANA_PORT:-5601}:5601 # Expose Kibana port
    environment:
      - SERVERNAME=kibana # Hostname for Kibana server
      - ELASTICSEARCH_HOSTS=https://es01:9200 # Point Kibana to Elasticsearch
      - ELASTICSEARCH_USERNAME=kibana_system # User Kibana uses to connect to ES
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD} # Password for kibana_system user
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt # Trust the CA
      # Optional: Encryption keys for sensitive settings
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY:-$(openssl rand -hex 32)}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY:-$(openssl rand -hex 32)}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY:-$(openssl rand -hex 32)}
    mem_limit: ${KB_MEM_LIMIT:-1g} # Memory limit for Kibana (adjust as needed)
    healthcheck:
      # Check if Kibana UI is responding (usually with a redirect)
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120